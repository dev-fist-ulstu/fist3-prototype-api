# Generated by Django 5.1.3 on 2024-12-22 15:54

import core.business_logic_layer.filemanager.path_saver
import core.direct_sql_worker.server_time
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserCustom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Отчество')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('is_confirmed_email', models.BooleanField(default=False, verbose_name='Почта подтверждена')),
                ('image', models.ImageField(blank=True, default='not-found.png', null=True, upload_to=core.business_logic_layer.filemanager.path_saver.user_image_upload_to, verbose_name='Аватар')),
                ('phone', models.CharField(blank=True, default='Не указано', max_length=15, null=True, verbose_name='Номер телефона')),
                ('gender', models.CharField(blank=True, default=None, max_length=6, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'user"."users',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('name', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True)),
                ('permission_level', models.IntegerField(verbose_name='Уровень доступа')),
                ('role_description', models.TextField(blank=True, null=True, verbose_name='Описание роли')),
            ],
            options={
                'db_table': 'user"."roles',
                'ordering': ['permission_level'],
            },
        ),
        migrations.CreateModel(
            name='UserAdditionalData',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_end_bachelor_degree', models.BooleanField(default=False)),
                ('is_end_master_degree', models.BooleanField(default=False)),
                ('is_end_specialist_degree', models.BooleanField(default=False)),
                ('is_end_postgraduate_degree', models.BooleanField(default=False)),
                ('is_lecturer', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Дополнительные данные пользователя',
                'verbose_name_plural': 'Дополнительные данные пользователей',
                'db_table': 'user"."user_additional_data',
                'ordering': ['user_id'],
            },
        ),
        migrations.CreateModel(
            name='AccessTokens',
            fields=[
                ('token', models.TextField(primary_key=True, serialize=False)),
                ('valid_to', models.DateTimeField(default=None)),
                ('token_created_dt', models.DateTimeField(default=core.direct_sql_worker.server_time.get_server_time_now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'session"."access_tokens',
            },
        ),
        migrations.CreateModel(
            name='RefreshTokens',
            fields=[
                ('token', models.TextField(primary_key=True, serialize=False)),
                ('valid_to', models.DateTimeField(default=None)),
                ('token_created_dt', models.DateTimeField(default=core.direct_sql_worker.server_time.get_server_time_now)),
                ('access', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='user.accesstokens')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'session"."refresh_tokens',
            },
        ),
        migrations.AddField(
            model_name='usercustom',
            name='role',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.role'),
        ),
        migrations.CreateModel(
            name='UserEducationInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_date', models.DateField(default=None, null=True)),
                ('ended_date', models.DateField(default=None, null=True)),
                ('education_name', models.CharField(blank=True, default=None, max_length=500, null=True)),
                ('education_information', models.TextField(blank=True, null=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user"."education_information',
            },
        ),
        migrations.CreateModel(
            name='UserLoginInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.CharField(blank=True, max_length=50, null=True)),
                ('is_ipv6', models.BooleanField(default=False)),
                ('user_agent', models.TextField(blank=True, default='not_presented', null=True)),
                ('operation_system', models.CharField(default='not_presented', max_length=100)),
                ('browser_name', models.CharField(blank=True, default='not_presented', max_length=100, null=True)),
                ('request_dt', models.DateTimeField(default=core.direct_sql_worker.server_time.get_server_time_now)),
                ('is_success_login', models.BooleanField(default=True)),
                ('login_attempt_counter', models.IntegerField(blank=True, default=1, null=True)),
                ('logged_in_dt', models.DateTimeField(default=core.direct_sql_worker.server_time.get_server_time_now)),
                ('user_time_zone', models.TextField(blank=True, null=True)),
                ('is_active_session', models.BooleanField(default=True)),
                ('generated_access_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.accesstokens')),
                ('generated_refresh_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.refreshtokens')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'session"."login_information',
                'ordering': ['id'],
            },
        ),
    ]
